BACKUP ~SlightlyImprovedIlyich/backup~
AUTHOR ~Razfallow (razfallow@sigil.cz)~

ALLOW_MISSING
              ~BALSHLD.SPL~
              ~BHAAL1b.SPL~
              ~bhaal2a.spl~
              ~dgarchon.spl~
              ~dgfaith.spl~
              ~dgright.spl~
              ~melis02.spl~
              ~spcl900.spl~
              ~spcl901.spl~
              ~spcl902.spl~
              ~spcl903.spl~
              ~spcl905.spl~
              ~spcl906.spl~
              ~spcl909.spl~
              ~spcl910.spl~
              ~spcl911.spl~  
              ~spcl912.spl~
              ~spcl923.spl~
              ~spcl916.spl~
              ~spin571.spl~
              ~spinhum.spl~
              ~sppr725.spl~
              ~sppr730.spl~
              ~spwi921.spl~
              ~spwish07.spl~

DEFINE_ACTION_MACRO ~DETECTABLE_SPELLS~ BEGIN

ACTION_IF NOT FILE_EXISTS ~override/cddetect.spl~ THEN BEGIN
  COPY_EXISTING ~SPWI103.SPL~ ~override/cddetect.spl~

// scriptable spells
COPY_EXISTING ~SPCL232.spl~ ~override~
			  ~SPCL412.spl~ ~override~
			  ~SPCL414.spl~ ~override~
			  ~SPCL621.spl~ ~override~
			  ~SPCL721.spl~ ~override~
			  ~SPCL722.spl~ ~override~
			  ~SPCL731.spl~ ~override~
			  ~SPCL732.spl~ ~override~
			  ~SPCL741.spl~ ~override~
			  ~SPCL742.spl~ ~override~
			  ~SPIN683.spl~ ~override~
			  ~SPIN696.spl~ ~override~
			  ~SPIN697.spl~ ~override~
			  ~SPIN698.spl~ ~override~
			  ~SPIN891.spl~ ~override~
			  ~SPCL910.spl~ ~override~
			  ~SPCL911.spl~ ~override~
			  ~SPCL912.spl~ ~override~
			  ~SPCL923.spl~ ~override~
PATCH_IF SOURCE_SIZE > 0x34 BEGIN
  WRITE_LONG 0x34 1
END
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~stats.ids~ ~override~
REPLACE_TEXTUALLY ~^110 .+~ ~110 CLERIC_ARMOR_OF_FAITH~
REPLACE_TEXTUALLY ~^116 .+~ ~116 WIZARD_SPELL_DEFLECTION~
REPLACE_TEXTUALLY ~^117 .+~ ~117 PROTECTION_FROM_EVIL~
REPLACE_TEXTUALLY ~^118 .+~ ~118 TRUE_SIGHT~
REPLACE_TEXTUALLY ~^119 .+~ ~119 CLERIC_CHAOTIC_COMMANDS~
REPLACE_TEXTUALLY ~^120 .+~ ~120 CLERIC_INSECT_PLAGUE~
REPLACE_TEXTUALLY ~^121 .+~ ~121 CLERIC_BLADE_BARRIER~
REPLACE_TEXTUALLY ~^122 .+~ ~122 CLERIC_PHYSICAL_MIRROR~
REPLACE_TEXTUALLY ~^123 .+~ ~123 CLERIC_SHIELD_OF_THE_ARCHONS~
REPLACE_TEXTUALLY ~^124 .+~ ~124 CLERIC_REGENERATION~
REPLACE_TEXTUALLY ~^125 .+~ ~125 WIZARD_FIRE_SHIELD~
REPLACE_TEXTUALLY ~^126 .+~ ~126 WIZARD_PROTECTION_FROM_MAGIC_ENERGY~
REPLACE_TEXTUALLY ~^127 .+~ ~127 WIZARD_MISLEAD~
REPLACE_TEXTUALLY ~^128 .+~ ~128 WIZARD_PROTECTION_FROM_MAGIC_WEAPONS~
REPLACE_TEXTUALLY ~^129 .+~ ~129 WIZARD_SPELL_TURNING~
REPLACE_TEXTUALLY ~^130 .+~ ~130 WIZARD_PROTECTION_FROM_THE_ELEMENTS~
REPLACE_TEXTUALLY ~^131 .+~ ~131 CLERIC_FREE_ACTION~
REPLACE_TEXTUALLY ~^132 .+~ ~132 WIZARD_KHELBENS_WARDING_WHIP~
REPLACE_TEXTUALLY ~^133 .+~ ~133 CLERIC_DEFENSIVE_HARMONY~
REPLACE_TEXTUALLY ~^134 .+~ ~134 LEVELDRAIN~
REPLACE_TEXTUALLY ~^157 .+~ ~157 SCRIPTINGSTATE2~
REPLACE_TEXTUALLY ~^158 .+~ ~158 SCRIPTINGSTATE3~
REPLACE_TEXTUALLY ~^159 .+~ ~159 SCRIPTINGSTATE4~
REPLACE_TEXTUALLY ~^160 .+~ ~160 SCRIPTINGSTATE5~
REPLACE_TEXTUALLY ~^161 .+~ ~161 SCRIPTINGSTATE6~
REPLACE_TEXTUALLY ~^162 .+~ ~162 WIZARD_SPELL_IMMUNITY~
REPLACE_TEXTUALLY ~^163 .+~ ~163 WIZARD_PROTECTION_FROM_ENERGY~
REPLACE_TEXTUALLY ~^164 .+~ ~164 WIZARD_SPELL_TRAP~
REPLACE_TEXTUALLY ~^165 .+~ ~165 WIZARD_IMPROVED_ALACRITY~
APPEND ~stats.ids~ ~176 WIZARD_PROTECTION_FROM_PETRIFICATION~ UNLESS ~176 WIZARD_PROTECTION_FROM_PETRIFICATION~
APPEND ~stats.ids~ ~177 WIZARD_SPELL_SHIELD~ UNLESS ~177 WIZARD_SPELL_SHIELD~
APPEND ~stats.ids~ ~178 WIZARD_RESIST_FEAR~ UNLESS ~178 WIZARD_RESIST_FEAR~
APPEND ~stats.ids~ ~179 WIZARD_PROTECTION_FROM_NORMAL_MISSILES~ UNLESS ~179 WIZARD_PROTECTION_FROM_NORMAL_MISSILES~
APPEND ~stats.ids~ ~180 WIZARD_GREATER_MALISON~ UNLESS ~180 WIZARD_GREATER_MALISON~
APPEND ~stats.ids~ ~181 WIZARD_PROTECTION_FROM_NORMAL_WEAPONS~ UNLESS ~181 WIZARD_PROTECTION_FROM_NORMAL_WEAPONS~
BUT_ONLY_IF_IT_CHANGES

//first, special patches. We need to remove melis02's existing script state modifier
  COPY_EXISTING ~melis02.spl~ ~override~
                ~spcl741.spl~ ~override~
    READ_LONG  0x64 "abil_off" ELSE 0
    READ_SHORT 0x68 "abil_num" ELSE 0
    READ_LONG  0x6a "fx_off" ELSE 0
    FOR (index = 0; index < abil_num; index = index + 1) BEGIN
      READ_SHORT ("%abil_off%" + 0x1e + (0x28 * "%index%")) "abil_fx_num"
      READ_SHORT ("%abil_off%" + 0x20 + (0x28 * "%index%")) "abil_fx_idx"
      FOR (index2 = 0; index2 < abil_fx_num; index2 = index2 + 1) BEGIN
        READ_SHORT   ("%fx_off%" +        (0x30 * ("%abil_fx_idx%" + "%index2%"))) "opcode"
        PATCH_IF ("%opcode%" = 282) BEGIN // if modify prof already exists
          WRITE_BYTE ("%fx_off%" + 0x12 + (0x30 * ("%abil_fx_idx%" + "%index2%"))) 0 // set prob to 0
        END
      END
    END
    BUT_ONLY_IF_IT_CHANGES

//khelben's is another special case
    COPY_EXISTING ~spwi705.spl~ ~override~
      PATCH_IF (SOURCE_SIZE > 0x71) THEN BEGIN // protects against invalid files
        READ_LONG  0x64 "abil_off"
        READ_SHORT 0x68 "abil_num"
        READ_LONG  0x6a "fx_off"
        SET "delta" = 0
        FOR (index = 0; index < abil_num; index = index + 1) BEGIN
          READ_SHORT ("%abil_off%" + 0x1e + (0x28 * "%index%")) "abil_fx_num"
          READ_SHORT ("%abil_off%" + 0x20 + (0x28 * "%index%")) "abil_fx_idx"
          SET "abil_fx_idx" = ("%abil_fx_idx%" + "%delta%")
          WRITE_SHORT ("%abil_off%" + 0x20 + (0x28 * "%index%")) "%abil_fx_idx%"
          FOR (index2 = 0; index2 < abil_fx_num; index2 = index2 + 1) BEGIN
            READ_SHORT   ("%fx_off%" +        (0x30 * ("%abil_fx_idx%" + "%index2%"))) "opcode"
            SET "local_delta" = 0
            PATCH_IF ("%opcode%" = 230) BEGIN // opcode to clone
              READ_ASCII ("%fx_off%" +        (0x30 * ("%abil_fx_idx%" + "%index2%"))) "clone" (0x30)
              INSERT_BYTES            ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 0x30       // insert bytes for new effect
                WRITE_EVALUATED_ASCII ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) "%clone%"  // clones portrait icon effect
                WRITE_SHORT           ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 282 // modify script state/prof
                WRITE_LONG            ("%fx_off%" + 0x04 + (0x30 * "%abil_fx_idx%")) 0  // value
                WRITE_LONG            ("%fx_off%" + 0x08 + (0x30 * "%abil_fx_idx%")) 7   // script state/prof
              INSERT_BYTES            ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 0x30       // insert bytes for new effect
                WRITE_EVALUATED_ASCII ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) "%clone%"  // clones portrait icon effect
                WRITE_SHORT           ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 282 // modify script state/prof
                WRITE_LONG            ("%fx_off%" + 0x04 + (0x30 * "%abil_fx_idx%")) 0  // value
                WRITE_LONG            ("%fx_off%" + 0x08 + (0x30 * "%abil_fx_idx%")) 5   // script state/prof
              INSERT_BYTES            ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 0x30       // insert bytes for new effect
                WRITE_EVALUATED_ASCII ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) "%clone%"  // clones portrait icon effect
                WRITE_SHORT           ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 233 // modify script state/prof
                WRITE_LONG            ("%fx_off%" + 0x04 + (0x30 * "%abil_fx_idx%")) 0  // value
                WRITE_LONG            ("%fx_off%" + 0x08 + (0x30 * "%abil_fx_idx%")) 129   // script state/prof
              INSERT_BYTES            ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 0x30       // insert bytes for new effect
                WRITE_EVALUATED_ASCII ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) "%clone%"  // clones portrait icon effect
                WRITE_SHORT           ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 233 // modify script state/prof
                WRITE_LONG            ("%fx_off%" + 0x04 + (0x30 * "%abil_fx_idx%")) 0  // value
                WRITE_LONG            ("%fx_off%" + 0x08 + (0x30 * "%abil_fx_idx%")) 116   // script state/prof
              SET "delta" = ("%delta%" + 4)
              SET "local_delta" = ("%local_delta%" + 4)
            END
            INSERT_BYTES            ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 0x30       // insert bytes for new effect
              WRITE_EVALUATED_ASCII ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) "%clone%"  // clones portrait icon effect
              WRITE_SHORT           ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 233 // modify script state/prof
              WRITE_BYTE            ("%fx_off%" + 0x02 + (0x30 * "%abil_fx_idx%")) 1 // target:self
              WRITE_LONG            ("%fx_off%" + 0x04 + (0x30 * "%abil_fx_idx%")) 1  // value
              WRITE_LONG            ("%fx_off%" + 0x08 + (0x30 * "%abil_fx_idx%")) 132   // script state/prof
              WRITE_BYTE            ("%fx_off%" + 0x0c + (0x30 * "%abil_fx_idx%")) 0 // instant/limited
              WRITE_BYTE            ("%fx_off%" + 0x0d + (0x30 * "%abil_fx_idx%")) 0 // no dispel/no bypass
            SET "delta" = ("%delta%" + 1)
            SET "local_delta" = ("%local_delta%" + 1)
          END
          WRITE_SHORT ("%abil_off%" + 0x1e + (0x28 * "%index%")) ("%abil_fx_num%" + "%local_delta%")
        END
      END
      BUT_ONLY_IF_IT_CHANGES

  COPY ~SlightlyImprovedIlyich/detectable_spells/cddetect.2da~  ~override/cddetect.2da~
    COUNT_2DA_ROWS 6 "rows"
    FOR( index3 = 1 ; index3 < rows ; index3 = index3 + 1 ) BEGIN
      READ_2DA_ENTRY "%index3%" 0 6 "spell" // may also be an item now, but I don't feel like changing the variable
      										// in all places  :) -Bigg
      READ_2DA_ENTRY "%index3%" 1 6 "new_op"
      READ_2DA_ENTRY "%index3%" 2 6 "value"
      READ_2DA_ENTRY "%index3%" 3 6 "stat"
      READ_2DA_ENTRY "%index3%" 4 6 "clone_op"
      READ_2DA_ENTRY "%index3%" 5 6 "patch_what" // 'A'    = all headers
                                                 // 'G'    = global/equiped
                                                 // number = specific header (so you can EG detect stun from Chromatic
                                                 //           orb or whatever now  :D)
                                                 // please don't put other symbols in that coloumn  ;D
                                                 // if number is too big no patch should be applied.
      INNER_ACTION BEGIN
        ACTION_IF FILE_EXISTS_IN_GAME EVALUATE_BUFFER ~%spell%~ THEN BEGIN
          COPY_EXISTING ~%spell%~ ~override~
            PATCH_IF (SOURCE_SIZE > 0x71) THEN BEGIN // protects against invalid files

              READ_LONG  0x64 "abil_off"
              READ_SHORT 0x68 "abil_num"
              READ_LONG  0x6a "fx_off"
  
              // set the only difference between ITM and SPL files.
              READ_ASCII 0 first_chars (3)
              PATCH_IF ~%first_chars%~ STRING_COMPARE_CASE ~SPL~ BEGIN // if it's an ITM (_not_ a SPL)
                SET extended_size = 0x38
              END ELSE BEGIN
                SET extended_size = 0x28
              END
  
              SET patch_specific_header = 0
              SET specific_header = 0
              PATCH_IF ( ~%patch_what%~ STRING_COMPARE_CASE ~A~ ) && ( ~%patch_what%~ STRING_COMPARE_CASE ~G~ ) BEGIN
              // if it isn't either "[A]ll headers" or "[G]lobal/equiped effects" I suppose it's the number
              // of a specific effect: extract it and then mark that it was a number
                SET patch_specific_header = 1
                SET specific_header = ~%patch_what%~
              END
  
                   // if it's either 'A' or 'a' or a number
              PATCH_IF !( ~%patch_what%~ STRING_COMPARE_CASE ~A~ ) || patch_specific_header BEGIN
                SET "delta" = 0
  
                   // if I want to patch a specific header, I'll use different initializations 
                    /* (can I use goto or break, Weimer? Pleaseeee  :D */
                PATCH_IF patch_specific_header BEGIN
                  SET index = specific_header
                  SET abil_num_true = abil_num
                  SET abil_num = index + 1
                  SET patch_specific_header = index < abil_num_true ? 1 : 0 // prevent errors if %number% is too big.
                  // while I'm here, patch the offset table, as this wouldn't happen otherwise
                  FOR (i = specific_header + 1; i < abil_num_true; i+=1) BEGIN
                    READ_SHORT ("%abil_off%" + 0x20 + ("%extended_size%" * "%i%")) "abil_fx_idx"
                    WRITE_SHORT ("%abil_off%" + 0x20 + ("%extended_size%" * "%i%")) "%abil_fx_idx%" + 1
                  END
                END ELSE BEGIN
                  SET index = 0
                END
  
                FOR (/* initialized before */; index < abil_num; index = index + 1) BEGIN
                  READ_SHORT ("%abil_off%" + 0x1e + ("%extended_size%" * "%index%")) "abil_fx_num"
                  READ_SHORT ("%abil_off%" + 0x20 + ("%extended_size%" * "%index%")) "abil_fx_idx"
                  PATCH_IF (!patch_specific_header) BEGIN
                    SET "abil_fx_idx" = ("%abil_fx_idx%" + "%delta%")
                    WRITE_SHORT ("%abil_off%" + 0x20 + ("%extended_size%" * "%index%")) "%abil_fx_idx%"
                  END
                  FOR (index2 = 0; index2 < abil_fx_num; index2 = index2 + 1) BEGIN
                    READ_SHORT   ("%fx_off%" +        (0x30 * ("%abil_fx_idx%" + "%index2%"))) "opcode"
                    PATCH_IF ("%opcode%" = "%clone_op%") BEGIN // opcode to clone
                      READ_ASCII ("%fx_off%" +        (0x30 * ("%abil_fx_idx%" + "%index2%"))) "clone" (0x30)
                    END ELSE
                    PATCH_IF ("%opcode%" = 282) BEGIN // if modify prof already exists
                      WRITE_BYTE ("%fx_off%" + 0x12 + (0x30 * ("%abil_fx_idx%" + "%index2%"))) 0 // set prob to 0
                    END
                  END
                  INSERT_BYTES            ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) 0x30       // insert bytes for new effect
                    WRITE_EVALUATED_ASCII ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) "%clone%"  // clones portrait icon effect
                    WRITE_SHORT           ("%fx_off%" +        (0x30 * "%abil_fx_idx%")) "%new_op%" // modify script state/prof
                    WRITE_LONG            ("%fx_off%" + 0x04 + (0x30 * "%abil_fx_idx%")) "%value%"  // value
                    WRITE_LONG            ("%fx_off%" + 0x08 + (0x30 * "%abil_fx_idx%")) "%stat%"   // script state/prof
                  SET "delta" = ("%delta%" + 1)
                  WRITE_SHORT ("%abil_off%" + 0x1e + ("%extended_size%" * "%index%")) ("%abil_fx_num%" + 1)
                END // closes for... all extended headers
              END // closes PATCH_IF [A]ll headers or specific header to patch
  
              PATCH_IF !( ~%patch_what%~ STRING_COMPARE_CASE ~G~ ) BEGIN // if I want to patch [G]lobal/equiped effects
                READ_SHORT 0x6e "fx_idx"
                READ_SHORT 0x70 "fx_num"
                WRITE_SHORT 0x70 "%fx_num%" + 1
                FOR (index = 0; index < abil_num; index += 1) BEGIN // index update
                  READ_SHORT ("%abil_off%" + 0x20 + ("%extended_size%" * "%index%")) "abil_fx_idx"
                  WRITE_SHORT ("%abil_off%" + 0x20 + ("%extended_size%" * "%index%")) "%abil_fx_idx%" + 1
                END
                FOR (index2 = 0; index2 < fx_num; index2 = index2 + 1) BEGIN
                  READ_SHORT   ("%fx_off%" +        (0x30 * ("%fx_idx%" + "%index2%"))) "opcode"
                  PATCH_IF ("%opcode%" = "%clone_op%") BEGIN // opcode to clone
                    READ_ASCII ("%fx_off%" +        (0x30 * ("%fx_idx%" + "%index2%"))) "clone" (0x30)
                  END ELSE
                  PATCH_IF ("%opcode%" = 282) BEGIN // if modify prof already exists
                    WRITE_BYTE ("%fx_off%" + 0x12 + (0x30 * ("%fx_idx%" + "%index2%"))) 0 // set prob to 0
                  END
                END
                INSERT_BYTES            ("%fx_off%" +        (0x30 * "%fx_idx%")) 0x30       // insert bytes for new effect
                  WRITE_EVALUATED_ASCII ("%fx_off%" +        (0x30 * "%fx_idx%")) "%clone%"  // clones portrait icon effect
                  WRITE_SHORT           ("%fx_off%" +        (0x30 * "%fx_idx%")) "%new_op%" // modify script state/prof
                  WRITE_LONG            ("%fx_off%" + 0x04 + (0x30 * "%fx_idx%")) "%value%"  // value
                  WRITE_LONG            ("%fx_off%" + 0x08 + (0x30 * "%fx_idx%")) "%stat%"   // script state/prof
                SET "delta" = ("%delta%" + 1)
              END // closes PATCH_IF [G]lobal/equiped effects
  
            END // closes PATCH_IF %FILE_SIZE% is correct
            BUT_ONLY_IF_IT_CHANGES
  
        END // closes inner_action
      END // closes PATCH_IF file_exists
    END // closes FOR loops

  // adds ds dtuff to items for level draining
  COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
    PATCH_IF (SOURCE_SIZE > 0x71) THEN BEGIN // protects against invalid files
      READ_LONG   0x64 "abil_off"
      READ_SHORT  0x68 "abil_num"
      READ_LONG   0x6a "fx_off"
      READ_SHORT  0x70 "fx_num"
      SET "delta" = 0
      FOR (index3 = 0; index3 < fx_num; index3 = index3 + 1) BEGIN // looks through global effects
        READ_SHORT  ("%fx_off%" +        ("%index3%" * 0x30)) "opcode"
        PATCH_IF ("%opcode%" = 216) BEGIN // level drain
          READ_ASCII ("%fx_off%" +        ("%index3%" * 0x30)) "clone" (0x30)
          SET "fx_num" = "%fx_num%"  + 1
          SET "index3" = "%index3%"  + 1
          INSERT_BYTES            ("%fx_off%" +        (("%index3%") * 0x30)) 0x30 // new effect
            WRITE_EVALUATED_ASCII ("%fx_off%" +        (("%index3%") * 0x30)) "%clone%" #48
            WRITE_SHORT           ("%fx_off%" +        (("%index3%") * 0x30)) 233 // modify prof opcode
            WRITE_BYTE            ("%fx_off%" + 0x03 + (("%index3%") * 0x30)) 4   // power
            WRITE_LONG            ("%fx_off%" + 0x04 + (("%index3%") * 0x30)) 1   // value
            WRITE_LONG            ("%fx_off%" + 0x08 + (("%index3%") * 0x30)) 134 // script state/prof
          SET "delta" = ("%delta%" + 1)
        END
      END
      WRITE_SHORT  0x70 "%fx_num%"
      FOR (index = 0; index < abil_num; index = index + 1) BEGIN // loop through abilities
        READ_SHORT  ("%abil_off%" + 0x1e + ("%index%" * 0x38)) "abil_fx_num"
        READ_SHORT  ("%abil_off%" + 0x20 + ("%index%" * 0x38)) "abil_fx_idx"
        SET "abil_fx_idx" = ("%abil_fx_idx%" + "%delta%")
        WRITE_SHORT  ("%abil_off%" + 0x20 + ("%index%" * 0x38)) "%abil_fx_idx%"
        FOR (index2 = 0; index2 < abil_fx_num; index2 = index2 + 1) BEGIN // looks for effects for abilities
          READ_SHORT  ("%fx_off%" +        (("%abil_fx_idx%" + "%index2%") * 0x30)) "opcode"
          PATCH_IF ("%opcode%" = 216) BEGIN // level drain
            READ_ASCII ("%fx_off%" +        (("%abil_fx_idx%" + "%index2%") * 0x30)) "clone" (0x30)
            SET "abil_fx_num" = "%abil_fx_num%"  + 1
            SET "index2" = "%index2%"  + 1
            INSERT_BYTES            ("%fx_off%" +        (("%abil_fx_idx%" + "%index2%") * 0x30)) 0x30 // new effect
              WRITE_EVALUATED_ASCII ("%fx_off%" +        (("%abil_fx_idx%" + "%index2%") * 0x30)) "%clone%" #48
              WRITE_SHORT           ("%fx_off%" +        (("%abil_fx_idx%" + "%index2%") * 0x30)) 233 // modify prof opcode
              WRITE_BYTE            ("%fx_off%" + 0x03 + (("%abil_fx_idx%" + "%index2%") * 0x30)) 4   // power
              WRITE_LONG            ("%fx_off%" + 0x04 + (("%abil_fx_idx%" + "%index2%") * 0x30)) 1   // value
              WRITE_LONG            ("%fx_off%" + 0x08 + (("%abil_fx_idx%" + "%index2%") * 0x30)) 134 // script state/prof
            SET "delta" = ("%delta%" + 1)
          END
        END
        WRITE_SHORT  ("%abil_off%" + 0x1e + ("%index%" * 0x38)) "%abil_fx_num%"
      END
    END
    BUT_ONLY_IF_IT_CHANGES

  // duplicate EFF stuff - directly from the RTWP beta (yes, you read correctly!)
  // Sorry for old fashioned constructs, different writing style et al.
  COPY ~SlightlyImprovedIlyich/detectable_spells/effects.2da~ ~override/tb#det_effects.txt~
    COUNT_2DA_ROWS 5 rows
    FOR (cycle = 1; cycle < rows; cycle = cycle + 1) BEGIN
      READ_2DA_ENTRY cycle 0 5 old_file
      READ_2DA_ENTRY cycle 1 5 new_file
      READ_2DA_ENTRY cycle 2 5 new_op
      READ_2DA_ENTRY cycle 3 5 value
      READ_2DA_ENTRY cycle 4 5 stat

      INNER_ACTION BEGIN
        ACTION_IF FILE_EXISTS_IN_GAME EVALUATE_BUFFER ~%old_file%.eff~ THEN BEGIN
          COPY_EXISTING ~%old_file%.eff~ ~override/%new_file%.eff~
            WRITE_LONG 0x10 new_op
            WRITE_LONG 0x1c value
            WRITE_LONG 0x20 stat
        END // if file exists
      END // inner_action
    END  // FOR

    // find all calls of such effects in ITM or SPL files and add secondary.
  COPY_EXISTING_REGEXP GLOB ~.*\.itm~ ~override~
                            ~.*\.spl~ ~override~
    PATCH_IF (~%SOURCE_SIZE%~ > 0x71) BEGIN // protects from invalid files
      // initializing phase
      SPRINT ~realname~ ~%SOURCE_RES%~
      READ_LONG 0x64 ext_off            // har har  ;D
      READ_SHORT 0x68 ext_count
      READ_LONG 0x6a eff_off
      READ_SHORT 0x6e eq_eff_indx
      READ_SHORT 0x70 eq_eff_count
      READ_ASCII 0 typeoffile (3)
      SET needsneweff = 0
  
      PATCH_IF (~%typeoffile%~ STRING_COMPARE ~SPL~) BEGIN
        extended_header_size = 0x38 // the file is an item
      END ELSE BEGIN
        extended_header_size = 0x28 // the file is a spell
      END
  
      // First, we'll deal with the equipped effects (which need no shifting ahead of other stuff)
      FOR (eq_eff_cyc = 0 ; eq_eff_cyc < eq_eff_count ; eq_eff_cyc = eq_eff_cyc + 1) BEGIN
        READ_SHORT (eff_off + (eq_eff_indx + eq_eff_cyc) * 0x30) opcode ELSE 0
        needsneweff = 0
  
        PATCH_IF ((opcode = 0x110) OR (opcode = 0xb1) OR (opcode = 0x11b)
               OR (opcode = 0xf8) OR (opcode = 0xf9)) BEGIN // calling an external EFF
          READ_ASCII (0x14 + eff_off + (eq_eff_indx + eq_eff_cyc) * 0x30) resref
          needsneweff = 0
          PATCH_IF FILE_CONTAINS_EVALUATED (~SlightlyImprovedIlyich/detectable_spells/effects.2da~ ~^%resref% ~) BEGIN
            // search the updated effect; if exists in the listing, it needs copying
            INNER_PATCH_FILE ~SlightlyImprovedIlyich/detectable_spells/effects.2da~ BEGIN
              COUNT_2DA_ROWS 5 rows
              FOR (cycle = 1; (cycle < rows) && (~%old_file%~ STRING_COMPARE_CASE ~%resref%~); cycle = cycle + 1) BEGIN
                READ_2DA_ENTRY cycle 0 5 old_file
                READ_2DA_ENTRY cycle 1 5 new_file
              END  // FOR
              needsneweff = 1
            END // INNER_PATCH_FILE
          END // PATCH_IF... is the list of 'to be copied'
        END // PATCH_IF uses EFFS

        PATCH_IF needsneweff BEGIN
          // Create a new item effect, a direct copy of the old one
          INSERT_BYTES (eff_off + (ext_eff_indx + eq_eff_cyc + 1) * 0x30) 0x30
        // Weidu cannot INSERT at EOF: correct this
          PATCH_IF 1 BEGIN // the usual IF_EVAL tumor
          	READ_BYTE (eff_off + (eq_eff_indx + eq_eff_cyc) * 0x30) + 0x2f temp
    	    END
          WRITE_BYTE (eff_off + (eq_eff_indx + eq_eff_cyc) * 0x30) - 1 temp
          FOR (byte_cyc = 0; byte_cyc < 0x30; byte_cyc = byte_cyc + 1) BEGIN
            READ_BYTE (eff_off + byte_cyc + (ext_eff_indx + eq_eff_cyc) * 0x30) mybyte
            WRITE_BYTE (eff_off + byte_cyc + (ext_eff_indx + eq_eff_cyc + 1) * 0x30) mybyte
          END

          PATCH_IF (needsneweff = 1) BEGIN
            WRITE_EVALUATED_ASCII (eff_off + 0x14 + (ext_eff_indx + eq_eff_cyc + 1) * 0x30) ~%new_file%~ #8
          END

          eq_eff_count = eq_eff_count + 1 // obviously

          // what follows will update /all/ the extension header effect index if they come after this one.

          FOR (ext_cyc_1 = 0; ext_cyc_1 < ext_count; ext_cyc_1 = ext_cyc_1 + 1) BEGIN
            READ_SHORT (ext_off + (ext_cyc_1 * extended_header_size) + 0x20) ext1_eff_idx
            PATCH_IF (ext1_eff_idx > eq_eff_indx) BEGIN
              WRITE_SHORT (ext_off + (ext_cyc_1 * extended_header_size) + 0x20) ext1_eff_idx + 1
            END
          END //FOR
          WRITE_SHORT 0x70 eq_eff_count // an extra effect in the itm
          eq_eff_cyc += 1
        END // PATCH_IF needs to be updated
      END // FOR... (equipped effects cycle)

      // then the same deal for header effect. The only tricky-er thing is updating all those indexes.
      FOR (ext_cyc = 0; ext_cyc < ext_count; ext_cyc = ext_cyc + 1) BEGIN
        READ_SHORT (ext_off + (ext_cyc * extended_header_size) + 0x1e) ext_eff_count ELSE 0
        READ_SHORT (ext_off + (ext_cyc * extended_header_size) + 0x20) ext_eff_indx ELSE 0

        FOR (eq_eff_cyc = 0 ; eq_eff_cyc < ext_eff_count ; eq_eff_cyc = eq_eff_cyc + 1) BEGIN
          READ_SHORT (eff_off + (ext_eff_indx + eq_eff_cyc) * 0x30) opcode ELSE 0
          needsneweff = 0

          PATCH_IF ((opcode = 0x110) OR (opcode = 0xb1) OR (opcode = 0x11b)
                 OR (opcode = 0xf8) OR (opcode = 0xf9)) BEGIN // calling an external EFF
            READ_ASCII (0x14 + eff_off + (eq_eff_indx + eq_eff_cyc) * 0x30) resref
            needsneweff = 0
            PATCH_IF FILE_CONTAINS_EVALUATED (~SlightlyImprovedIlyich/detectable_spells/effects.2da~ ~^%resref% ~) BEGIN
              // search the updated effect; if exists in the listing, it needs copying
              INNER_PATCH_FILE ~SlightlyImprovedIlyich/detectable_spells/effects.2da~ BEGIN
                COUNT_2DA_ROWS 5 rows
                FOR (cycle = 1; (cycle < rows) && (~%old_file%~ STRING_COMPARE_CASE ~%resref%~); cycle = cycle + 1) BEGIN
                  READ_2DA_ENTRY cycle 0 5 old_file
                  READ_2DA_ENTRY cycle 1 5 new_file
                END  // FOR
                needsneweff = 1
              END // INNER_PATCH_FILE
            END // PATCH_IF... is the list of 'to be copied'
          END // PATCH_IF uses EFFS

          PATCH_IF needsneweff BEGIN
            // Create a new item effect, a direct copy of the old one
            INSERT_BYTES (eff_off + (ext_eff_indx + eq_eff_cyc + 1) * 0x30) 0x30
          // Weidu cannot INSERT at EOF: correct this
            PATCH_IF 1 BEGIN // the usual IF_EVAL tumor
            	READ_BYTE (eff_off + (eq_eff_indx + eq_eff_cyc) * 0x30) + 0x2f temp
      	    END
            WRITE_BYTE (eff_off + (eq_eff_indx + eq_eff_cyc) * 0x30) - 1 temp
            FOR (byte_cyc = 0; byte_cyc < 0x30; byte_cyc = byte_cyc + 1) BEGIN
              READ_BYTE (eff_off + byte_cyc + (ext_eff_indx + eq_eff_cyc) * 0x30) mybyte
              WRITE_BYTE (eff_off + byte_cyc + (ext_eff_indx + eq_eff_cyc + 1) * 0x30) mybyte
            END

            PATCH_IF (needsneweff = 1) BEGIN
              WRITE_EVALUATED_ASCII (eff_off + 0x14 + (ext_eff_indx + eq_eff_cyc + 1) * 0x30) ~%new_file%~ #8
            END
            ext_eff_count = ext_eff_count + 1 // obviously
            FOR (ext_cyc_1 = 0; ext_cyc_1 < ext_count; ext_cyc_1 = ext_cyc_1 + 1) BEGIN
              READ_SHORT (ext_off + (ext_cyc_1 * extended_header_size) + 0x20) ext1_eff_idx
              PATCH_IF ((ext1_eff_idx > ext_eff_indx) AND (ext_cyc_1 != ext_cyc)) BEGIN
                WRITE_SHORT (ext_off + (ext_cyc_1 * extended_header_size) + 0x20) ext1_eff_idx + 1
              END
            END //FOR

              // Also update equipped effect index
            PATCH_IF 1 BEGIN // IF_EVAL tumor
              READ_SHORT 0x6e eq_eff_indx
            END
            PATCH_IF ((eq_eff_indx > ext_eff_indx)) BEGIN
              WRITE_SHORT 0x6e eq_eff_indx + 1
            END

            WRITE_SHORT (ext_off + (ext_cyc * extended_header_size) + 0x1e) ext_eff_count // an extra effect in the itm
            eq_eff_cyc += 1

          END // PATCH_IF needs to be updated
        END // FOR... (header effects cycle)

      END // FOR... (extended headers cycle)
    END // PATCH_IF FILE_SIZE is correct
  BUT_ONLY_IF_IT_CHANGES
END
ELSE BEGIN
COPY_EXISTING ~stats.ids~ ~override~
REPLACE_TEXTUALLY ~^110 .+~ ~110 CLERIC_ARMOR_OF_FAITH~
REPLACE_TEXTUALLY ~^116 .+~ ~116 WIZARD_SPELL_DEFLECTION~
REPLACE_TEXTUALLY ~^117 .+~ ~117 PROTECTION_FROM_EVIL~
REPLACE_TEXTUALLY ~^118 .+~ ~118 TRUE_SIGHT~
REPLACE_TEXTUALLY ~^119 .+~ ~119 CLERIC_CHAOTIC_COMMANDS~
REPLACE_TEXTUALLY ~^120 .+~ ~120 CLERIC_INSECT_PLAGUE~
REPLACE_TEXTUALLY ~^121 .+~ ~121 CLERIC_BLADE_BARRIER~
REPLACE_TEXTUALLY ~^122 .+~ ~122 CLERIC_PHYSICAL_MIRROR~
REPLACE_TEXTUALLY ~^123 .+~ ~123 CLERIC_SHIELD_OF_THE_ARCHONS~
REPLACE_TEXTUALLY ~^124 .+~ ~124 CLERIC_REGENERATION~
REPLACE_TEXTUALLY ~^125 .+~ ~125 WIZARD_FIRE_SHIELD~
REPLACE_TEXTUALLY ~^126 .+~ ~126 WIZARD_PROTECTION_FROM_MAGIC_ENERGY~
REPLACE_TEXTUALLY ~^127 .+~ ~127 WIZARD_MISLEAD~
REPLACE_TEXTUALLY ~^128 .+~ ~128 WIZARD_PROTECTION_FROM_MAGIC_WEAPONS~
REPLACE_TEXTUALLY ~^129 .+~ ~129 WIZARD_SPELL_TURNING~
REPLACE_TEXTUALLY ~^130 .+~ ~130 WIZARD_PROTECTION_FROM_THE_ELEMENTS~
REPLACE_TEXTUALLY ~^131 .+~ ~131 CLERIC_FREE_ACTION~
REPLACE_TEXTUALLY ~^132 .+~ ~132 WIZARD_KHELBENS_WARDING_WHIP~
REPLACE_TEXTUALLY ~^133 .+~ ~133 CLERIC_DEFENSIVE_HARMONY~
REPLACE_TEXTUALLY ~^134 .+~ ~134 LEVELDRAIN~
REPLACE_TEXTUALLY ~^157 .+~ ~157 SCRIPTINGSTATE2~
REPLACE_TEXTUALLY ~^158 .+~ ~158 SCRIPTINGSTATE3~
REPLACE_TEXTUALLY ~^159 .+~ ~159 SCRIPTINGSTATE4~
REPLACE_TEXTUALLY ~^160 .+~ ~160 SCRIPTINGSTATE5~
REPLACE_TEXTUALLY ~^161 .+~ ~161 SCRIPTINGSTATE6~
REPLACE_TEXTUALLY ~^162 .+~ ~162 WIZARD_SPELL_IMMUNITY~
REPLACE_TEXTUALLY ~^163 .+~ ~163 WIZARD_PROTECTION_FROM_ENERGY~
REPLACE_TEXTUALLY ~^164 .+~ ~164 WIZARD_SPELL_TRAP~
REPLACE_TEXTUALLY ~^165 .+~ ~165 WIZARD_IMPROVED_ALACRITY~
APPEND ~stats.ids~ ~176 WIZARD_PROTECTION_FROM_PETRIFICATION~ UNLESS ~176 WIZARD_PROTECTION_FROM_PETRIFICATION~
APPEND ~stats.ids~ ~177 WIZARD_SPELL_SHIELD~ UNLESS ~177 WIZARD_SPELL_SHIELD~
APPEND ~stats.ids~ ~178 WIZARD_RESIST_FEAR~ UNLESS ~178 WIZARD_RESIST_FEAR~
APPEND ~stats.ids~ ~179 WIZARD_PROTECTION_FROM_NORMAL_MISSILES~ UNLESS ~179 WIZARD_PROTECTION_FROM_NORMAL_MISSILES~
APPEND ~stats.ids~ ~180 WIZARD_GREATER_MALISON~ UNLESS ~180 WIZARD_GREATER_MALISON~
APPEND ~stats.ids~ ~181 WIZARD_PROTECTION_FROM_NORMAL_WEAPONS~ UNLESS ~181 WIZARD_PROTECTION_FROM_NORMAL_WEAPONS~
BUT_ONLY_IF_IT_CHANGES
END // ends action_if
END

DEFINE_ACTION_MACRO ~COMPONENT_A~ BEGIN

ACTION_IF NOT FILE_EXISTS ~override/SII.rz~ THEN BEGIN
  COPY_EXISTING ~SPWI103.SPL~ ~override/SII.rz~
END

ACTION_IF FILE_EXISTS ~SlightlyImprovedIlyich/Readme_%LANGUAGE%.txt~ THEN BEGIN
  AT_INTERACTIVE_EXIT ~VIEW SlightlyImprovedIlyich/Readme_%LANGUAGE%.txt~
END ELSE BEGIN
  AT_INTERACTIVE_EXIT ~VIEW SlightlyImprovedIlyich/Readme_English.txt~
END

COPY_EXISTING ~kit.ids~ ~override/kit.ids~
    REPLACE_TEXTUALLY ~0x00004000~ ~0x4000~ // TRUECLASS/MAGESCHOOL_GENERALIST
    REPLACE_TEXTUALLY ~0x00000040~ ~0x0040~ // MAGESCHOOL_ABJURER
    REPLACE_TEXTUALLY ~0x00000080~ ~0x0080~ // MAGESCHOOL_CONJURER
    REPLACE_TEXTUALLY ~0x00000100~ ~0x0100~ // MAGESCHOOL_DIVINER
    REPLACE_TEXTUALLY ~0x00000200~ ~0x0200~ // MAGESCHOOL_ENCHANTER
    REPLACE_TEXTUALLY ~0x00000400~ ~0x0400~ // MAGESCHOOL_ILLUSIONIST
    REPLACE_TEXTUALLY ~0x00000800~ ~0x0800~ // MAGESCHOOL_INVOKER
    REPLACE_TEXTUALLY ~0x00001000~ ~0x1000~ // MAGESCHOOL_NECROMANCER
    REPLACE_TEXTUALLY ~0x00002000~ ~0x2000~ // MAGESCHOOL_TRANSMUTER
    REPLACE_TEXTUALLY ~0x00000001~ ~0x4001~ // BERSERKER
    REPLACE_TEXTUALLY ~0x00000002~ ~0x4002~ // WIZARDSLAYER
    REPLACE_TEXTUALLY ~0x00000004~ ~0x4003~ // KENSAI
    REPLACE_TEXTUALLY ~0x00000008~ ~0x4004~ // CAVALIER
    REPLACE_TEXTUALLY ~0x00000010~ ~0x4005~ // INQUISITOR
    REPLACE_TEXTUALLY ~0x00000020~ ~0x4006~ // UNDEADHUNTER
    REPLACE_TEXTUALLY ~0x00008000~ ~0x4007~ // FERALAN
    REPLACE_TEXTUALLY ~0x00010000~ ~0x4008~ // STALKER
    REPLACE_TEXTUALLY ~0x00020000~ ~0x4009~ // BEASTMASTER
    REPLACE_TEXTUALLY ~0x00040000~ ~0x400A~ // ASSASIN
    REPLACE_TEXTUALLY ~0x00080000~ ~0x400B~ // BOUNTYHUNTER
    REPLACE_TEXTUALLY ~0x00100000~ ~0x400C~ // SWASHBUCKLER
    REPLACE_TEXTUALLY ~0x00200000~ ~0x400D~ // BLADE
    REPLACE_TEXTUALLY ~0x00400000~ ~0x400E~ // JESTER
    REPLACE_TEXTUALLY ~0x00800000~ ~0x400F~ // SKALD
    REPLACE_TEXTUALLY ~0x01000000~ ~0x4013~ // GODTALOS
    REPLACE_TEXTUALLY ~0x02000000~ ~0x4014~ // GODHELM
    REPLACE_TEXTUALLY ~0x04000000~ ~0x4015~ // GODLATHANDER
    REPLACE_TEXTUALLY ~0x08000000~ ~0x4010~ // TOTEMIC
    REPLACE_TEXTUALLY ~0x10000000~ ~0x4011~ // SHAPESHIFTER
    REPLACE_TEXTUALLY ~0x20000000~ ~0x4012~ // BEASTFRIEND
    REPLACE_TEXTUALLY ~0x40000000~ ~0x401F~ // BARBARIAN
  BUT_ONLY_IF_IT_CHANGES
  
APPEND ~CLASS.IDS~
~202 LONG_BOW~
UNLESS ~202 LONG_BOW~
APPEND ~CLASS.IDS~
~202 MAGE_ALL~
UNLESS ~202 MAGE_ALL~

APPEND ~ACTION.IDS~
~31 SpellRES(S:RES*,O:Target*)~
UNLESS ~31 SpellRES~
APPEND ~ACTION.IDS~
~95 SpellPointRES(S:RES*,P:Target*)~
UNLESS ~95 SpellPointRES~
APPEND ~ACTION.IDS~
~113 ForceSpellRES(S:RES*,O:Target)~
UNLESS ~113 ForceSpellRES~
APPEND ~ACTION.IDS~
~114 ForceSpellPointRES(S:RES*,P:Target)~
UNLESS ~114 ForceSpellPointRES~
APPEND ~ACTION.IDS~
~160 ApplySpellRES(S:RES*,O:Target)~
UNLESS ~160 ApplySpellRES~
APPEND ~ACTION.IDS~
~181 ReallyForceSpellRES(S:RES*,O:Target)~
UNLESS ~181 ReallyForceSpellRES~
APPEND ~ACTION.IDS~
~191 SpellNoDecRES(S:RES*,O:Target*)~
UNLESS ~191 SpellNoDecRES~
APPEND ~ACTION.IDS~
~192 SpellPointNoDecRES(S:RES*,P:Target*)~
UNLESS ~192 SpellPointNoDecRES~
APPEND ~ACTION.IDS~
~240 ReallyForceSpellDeadRES(S:RES*,O:Target)~
UNLESS ~240 ReallyForceSpellDeadRES~
APPEND ~ACTION.IDS~
~318 ForceSpellRangeRES(S:RES*,O:Target)~
UNLESS ~318 ForceSpellRangeRES~
APPEND ~ACTION.IDS~
~319 ForceSpellPointRangeRES(S:RES*,P:Target)~
UNLESS ~319 ForceSpellPointRangeRES~
APPEND ~ACTION.IDS~
~337 ReallyForceSpellPointRES(S:RES*,P:Target*)~
UNLESS ~337 ReallyForceSpellPointRES~
APPEND ~TRIGGER.IDS~
~0x4031 HaveSpellRES(S:Spell*)~
UNLESS ~0x4031 HaveSpellRES~
APPEND ~TRIGGER.IDS~
~0x40DA HaveSpellParty(I:Spell*Spell)~
UNLESS ~0x40DA HaveSpellParty~
APPEND ~TRIGGER.IDS~ ~0x40D5 ActuallyInCombat()~
UNLESS ~0x40D5 ActuallyInCombat()~

APPEND ~State.ids~ ~0x80102033 RZ_STATE_DISABLED~   //helpless, stunned, sleeping, charmed, feeblemindnes, confusion, panic
UNLESS ~0x80102033 RZ_STATE_DISABLED~


COPY_EXISTING ~demon01.bcs~ ~override~
  DECOMPILE_BCS_TO_BAF
  REPLACE_TEXTUALLY ~ChangeAnimation("IDEMON02")~ ~ChangeAnimation("RZSIICMB")~
  COMPILE_BAF_TO_BCS
  BUT_ONLY_IF_IT_CHANGES
  
COPY_EXISTING ~frenneda.bcs~ ~override~
  DECOMPILE_BCS_TO_BAF
  REPLACE_TEXTUALLY ~Polymorph(DOPPLEGANGER)~ ~Polymorph(DOPPLEGANGER_GREATER)~
  COMPILE_BAF_TO_BCS
  BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~IMOEN.BCS~ ~override~
  REPLACE_BCS_BLOCK ~SlightlyImprovedIlyich/replace-baf/Immy-old.baf~ ~SlightlyImprovedIlyich/replace-baf/Immy-new.baf~

EXTEND_TOP ~AR0603.bcs~ ~SlightlyImprovedIlyich/are-baf/RZar0603.baf~
COMPILE ~SlightlyImprovedIlyich/baf~

COPY ~SlightlyImprovedIlyich/eff~ ~override~
COPY ~SlightlyImprovedIlyich/itm~ ~override~
COMPILE ~SlightlyImprovedIlyich/d~

COPY ~SlightlyImprovedIlyich/cre/RZsiiD01.cre~ ~override/RZsiiD01.cre~
    WRITE_ASCII 0x248 ~RZSIIGEN~ #8
    WRITE_ASCII 0x250 ~RZSIIWAA~ #8
    WRITE_ASCII 0x258 ~RZSIIATA~ #8
    WRITE_ASCII 0x260 ~NONE~ #8
    WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiD02.cre~ ~override/RZsiiD02.cre~
     WRITE_ASCII 0x248 ~RZSIITHA~ #8
     WRITE_ASCII 0x250 ~RZSIIATT~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiD03.cre~ ~override/RZsiiD03.cre~
     WRITE_ASCII 0x248 ~RZSIIPRA~ #8
     WRITE_ASCII 0x250 ~RZSIIPRB~ #8
     WRITE_ASCII 0x258 ~RZSIIATA~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8

COPY_EXISTING ~spcl133.spl~ ~override~
  READ_LONG  0x64 "abil_off"
  READ_SHORT 0x68 "abil_num"
  READ_LONG  0x6a "fx_off"
  SET "wizslay" = 0
  FOR (index = 0; index < abil_num; index = index + 1) BEGIN
    READ_SHORT ("%abil_off%" + 0x1e + (0x28 * "%index%")) "abil_fx_num"
    READ_SHORT ("%abil_off%" + 0x20 + (0x28 * "%index%")) "abil_fx_idx"
    FOR (index2 = 0; index2 < abil_fx_num; index2 = index2 + 1) BEGIN
      READ_SHORT ("%fx_off%" +        (0x30 * ("%abil_fx_idx%" + "%index2%"))) "opcode"
      PATCH_IF ("%opcode%" = 249) BEGIN
        SET "wizslay" = 1
        SET "index" = "%abil_num%" // kills main loops
        SET "index2" = "%abil_fx_num%" // kills secondary loop
      END
    END
  END
  BUT_ONLY_IF_IT_CHANGES

ACTION_IF (("%wizslay%" = 1) OR (FILE_EXISTS_IN_GAME "cdfp0112.g3")) THEN BEGIN
  COPY ~SlightlyImprovedIlyich/cre/RZsiiD04b.cre~ ~override/RZsiiD04.cre~
       WRITE_ASCII 0x248 ~RZSIIGEN~ #8
       WRITE_ASCII 0x250 ~RZSIIWSA~ #8
       WRITE_ASCII 0x258 ~RZSIIATW~ #8
       WRITE_ASCII 0x260 ~NONE~ #8
       WRITE_ASCII 0x268 ~NONE~ #8
END ELSE BEGIN
  COPY ~SlightlyImprovedIlyich/cre/RZsiiD04a.cre~ ~override/RZsiiD04.cre~
       WRITE_ASCII 0x248 ~RZSIIGEN~ #8
       WRITE_ASCII 0x250 ~RZSIIWSA~ #8
       WRITE_ASCII 0x258 ~RZSIIATW~ #8
       WRITE_ASCII 0x260 ~NONE~ #8
       WRITE_ASCII 0x268 ~NONE~ #8
END

COPY ~SlightlyImprovedIlyich/cre/RZsiiD05.cre~ ~override/RZsiiD05.cre~
     WRITE_ASCII 0x248 ~RZSIIMGA~ #8
     WRITE_ASCII 0x250 ~RZSIIMGB~ #8
     WRITE_ASCII 0x258 ~RZSIIATA~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiD07.cre~ ~override/RZsiiD07.cre~
     WRITE_ASCII 0x248 ~RZSIIGEN~ #8
     WRITE_ASCII 0x250 ~RZSIIWAA~ #8
     WRITE_ASCII 0x258 ~RZSIIATA~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiD08.cre~ ~override/RZsiiD08.cre~
     WRITE_ASCII 0x248 ~RZSIICD3~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiD09.cre~ ~override/RZsiiD09.cre~
     WRITE_ASCII 0x248 ~RZSIIGEN~ #8
     WRITE_ASCII 0x250 ~RZSIIWAA~ #8
     WRITE_ASCII 0x258 ~RZSIIATA~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiD10.cre~ ~override/RZsiiD10.cre~
     WRITE_ASCII 0x248 ~RZSIIGEN~ #8
     WRITE_ASCII 0x250 ~RZSIIMGA~ #8
     WRITE_ASCII 0x258 ~RZSIIMGB~ #8
     WRITE_ASCII 0x260 ~RZSIIATA~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiD11.cre~ ~override/RZsiiD11.cre~
     WRITE_ASCII 0x248 ~NONE~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiD12.cre~ ~override/RZsiiD12.cre~
     WRITE_ASCII 0x248 ~RZSIICD1~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
     
COPY ~SlightlyImprovedIlyich/cre/RZsiiH01.cre~ ~override/RZsiiH01.cre~
     WRITE_ASCII 0x248 ~RZSIIWAA~ #8
     WRITE_ASCII 0x250 ~RZSIIATA~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiH02.cre~ ~override/RZsiiH02.cre~
     WRITE_ASCII 0x248 ~RZSIIWAA~ #8
     WRITE_ASCII 0x250 ~RZSIIATA~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiH03.cre~ ~override/RZsiiH03.cre~
     WRITE_ASCII 0x248 ~RZSIIPRA~ #8
     WRITE_ASCII 0x250 ~RZSIIPRB~ #8
     WRITE_ASCII 0x258 ~RZSIIATA~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiH04.cre~ ~override/RZsiiH04.cre~
     WRITE_ASCII 0x248 ~RZSIIMGA~ #8
     WRITE_ASCII 0x250 ~RZSIIMGB~ #8
     WRITE_ASCII 0x258 ~RZSIIATA~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
     
COPY ~SlightlyImprovedIlyich/cre/RZsiiO01.cre~ ~override/RZsiiO01.cre~
     WRITE_ASCII 0x248 ~RZSIIWAA~ #8
     WRITE_ASCII 0x250 ~RZSIIATA~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiO02.cre~ ~override/RZsiiO02.cre~
     WRITE_ASCII 0x248 ~RZSIIWAA~ #8
     WRITE_ASCII 0x250 ~RZSIIATA~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiO03.cre~ ~override/RZsiiO03.cre~
     SAY NAME1 @1
     SAY NAME2 @1
     WRITE_ASCII 0x248 ~RZSIIPRA~ #8
     WRITE_ASCII 0x250 ~RZSIIPRB~ #8
     WRITE_ASCII 0x258 ~RZSIIATA~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
     
COPY ~SlightlyImprovedIlyich/cre/RZsiiT01.cre~ ~override/RZsiiT01.cre~
     WRITE_ASCII 0x248 ~RZSIICT2~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiT02.cre~ ~override/RZsiiT02.cre~
     WRITE_ASCII 0x248 ~RZSIICT2~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiT03.cre~ ~override/RZsiiT03.cre~
     WRITE_ASCII 0x248 ~RZSIICT2~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiT04.cre~ ~override/RZsiiT04.cre~
     WRITE_ASCII 0x248 ~RZSIIGEN~ #8
     WRITE_ASCII 0x250 ~RZSIIMGA~ #8
     WRITE_ASCII 0x258 ~RZSIIMGB~ #8
     WRITE_ASCII 0x260 ~RZSIIATA~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiT05.cre~ ~override/RZsiiT05.cre~
     WRITE_ASCII 0x248 ~RZSIITHA~ #8
     WRITE_ASCII 0x250 ~RZSIIATT~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiT06.cre~ ~override/RZsiiT06.cre~
     WRITE_ASCII 0x248 ~RZSIIWAA~ #8
     WRITE_ASCII 0x250 ~RZSIIATA~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiT07.cre~ ~override/RZsiiT07.cre~
     WRITE_ASCII 0x248 ~RZSIICT3~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiT08.cre~ ~override/RZsiiT08.cre~
     WRITE_ASCII 0x248 ~RZSIICT3~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiT09.cre~ ~override/RZsiiT09.cre~
     WRITE_ASCII 0x248 ~RZSIICT4~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiT10.cre~ ~override/RZsiiT10.cre~
     WRITE_ASCII 0x248 ~RZSIICT1~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiT11.cre~ ~override/RZsiiT11.cre~
     WRITE_ASCII 0x248 ~RZSIICT4~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
     
COPY ~SlightlyImprovedIlyich/cre/RZsiiOgm.cre~ ~override/RZsiiOgm.cre~
     WRITE_ASCII 0x248 ~RZSIIMGA~ #8
     WRITE_ASCII 0x250 ~RZSIIMGB~ #8
     WRITE_ASCII 0x258 ~RZSIIATA~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiCmb.cre~ ~override/RZsiiCmb.cre~
     WRITE_ASCII 0x248 ~RZSIIDMA~ #8
     WRITE_ASCII 0x250 ~RZSIIDMB~ #8
     WRITE_ASCII 0x258 ~RZSIIATA~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiClo.cre~ ~override/RZsiiClo.cre~
     WRITE_ASCII 0x248 ~RZSIICC5~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiFrn.cre~ ~override/RZsiiFrn.cre~
     WRITE_ASCII 0x248 ~SHOUTDLG~ #8
     WRITE_ASCII 0x250 ~FRENNEDA~ #8
     WRITE_ASCII 0x258 ~RZSIIMGA~ #8
     WRITE_ASCII 0x260 ~RZSIIATA~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
COPY ~SlightlyImprovedIlyich/cre/RZsiiG01.cre~ ~override/RZsiiG01.cre~
     WRITE_ASCII 0x248 ~RZSIICG4~ #8
     WRITE_ASCII 0x250 ~NONE~ #8
     WRITE_ASCII 0x258 ~NONE~ #8
     WRITE_ASCII 0x260 ~NONE~ #8
     WRITE_ASCII 0x268 ~NONE~ #8
     
COPY_EXISTING ~ULVARYL.cre~ ~override~
  WRITE_SHORT 0x24 90
  WRITE_SHORT 0x26 90
  WRITE_SHORT 0x46 0
  WRITE_SHORT 0x48 0
  WRITE_LONG 0x52 10
  WRITE_LONG 0x53 2
  WRITE_LONG 0x234 9
  WRITE_ASCII 0x248 ~RZSIICU2~
  WRITE_ASCII 0x250 ~NONE~ #8
  WRITE_ASCII 0x258 ~NONE~ #8
  WRITE_ASCII 0x260 ~NONE~ #8
  WRITE_ASCII 0x268 ~NONE~ #8
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~IGOLFLE1.cre~ ~override~
              ~IGOLFLE2.cre~ ~override~
  WRITE_ASCII 0x248 ~RZSIIGLM~
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~AR0602.are~ ~override~
  READ_SHORT 0x058 "#ofActor"
  READ_LONG 0x054 "actorOff"
  READ_SHORT 0x05a "#ofTrigg"
  READ_LONG 0x05c "triggOff"
  READ_LONG 0x064 "#ofSpawn"
  READ_LONG 0x060 "spawnOff"
  READ_LONG 0x06c "#ofEntra"
  READ_LONG 0x068 "entraOff"
  READ_SHORT 0x074 "#ofConta"
  READ_LONG 0x070 "contaOff"
  READ_SHORT 0x076 "#ofItems"
  READ_LONG 0x078 "itemsOff"
  READ_SHORT 0x080 "#ofVerti"
  READ_LONG 0x07c "vertiOff"
  READ_SHORT 0x082 "#ofAmbia"
  READ_LONG 0x084 "ambiaOff"
  READ_LONG 0x08c "#ofVaria"
  READ_LONG 0x088 "variaOff"
  READ_LONG 0x09c "#ofExplo"
  READ_LONG 0x0A0 "exploOff"
  READ_LONG 0x0A4 "#ofDoors"
  READ_LONG 0x0A8 "doorsOff"
  READ_LONG 0x0AC "#ofAnima"
  READ_LONG 0x0B0 "animaOff"
  READ_LONG 0x0B4 "#ofTiled"
  READ_LONG 0x0B8 "tiledOff"
  READ_LONG 0x0BC "songsOff"
  READ_LONG 0x0C0 "restcOff"
  READ_LONG 0x0C8 "#ofAutom"
  READ_LONG 0x0C4 "automOff"
  WRITE_ASCII ("%actorOff%" + (9 * 0x110) + 0x80) ~RZSIID05~ #8
  WRITE_SHORT ("%actorOff%" + (9 * 0x110) + 0x20) 1602
  WRITE_SHORT ("%actorOff%" + (9 * 0x110) + 0x22) 579
  WRITE_SHORT ("%actorOff%" + (9 * 0x110) + 0x24)1602
  WRITE_SHORT ("%actorOff%" + (9 * 0x110) + 0x26) 579
  WRITE_LONG ("%actorOff%" + (9 * 0x110) + 0x34) 8
  WRITE_ASCII ("%actorOff%" + (10 * 0x110) + 0x80) ~RZSIID01~ #8
  WRITE_SHORT ("%actorOff%" + (10 * 0x110) + 0x20) 1690
  WRITE_SHORT ("%actorOff%" + (10 * 0x110) + 0x22) 556
  WRITE_SHORT ("%actorOff%" + (10 * 0x110) + 0x24) 1690
  WRITE_SHORT ("%actorOff%" + (10 * 0x110) + 0x26) 556
  WRITE_LONG ("%actorOff%" + (10 * 0x110) + 0x34) 6
  WRITE_ASCII ("%actorOff%" + (11 * 0x110) + 0x80) ~RZSIID02~ #8
  WRITE_SHORT ("%actorOff%" + (11 * 0x110) + 0x20) 1815
  WRITE_SHORT ("%actorOff%" + (11 * 0x110) + 0x22) 669
  WRITE_SHORT ("%actorOff%" + (11 * 0x110) + 0x24) 1815
  WRITE_SHORT ("%actorOff%" + (11 * 0x110) + 0x26) 669
  WRITE_LONG ("%actorOff%" + (11 * 0x110) + 0x34) 3
  WRITE_ASCII ("%actorOff%" + (12 * 0x110) + 0x80) ~RZSIID03~ #8
  WRITE_SHORT ("%actorOff%" + (12 * 0x110) + 0x20) 1725
  WRITE_SHORT ("%actorOff%" + (12 * 0x110) + 0x22) 494
  WRITE_SHORT ("%actorOff%" + (12 * 0x110) + 0x24) 1725
  WRITE_SHORT ("%actorOff%" + (12 * 0x110) + 0x26) 494
  WRITE_LONG ("%actorOff%" + (12 * 0x110) + 0x34) 5
  WRITE_ASCII ("%actorOff%" + (16 * 0x110) + 0x80) ~RZSIID04~ #8
  WRITE_SHORT ("%actorOff%" + (16 * 0x110) + 0x20) 1635
  WRITE_SHORT ("%actorOff%" + (16 * 0x110) + 0x22) 479
  WRITE_SHORT ("%actorOff%" + (16 * 0x110) + 0x24) 1635
  WRITE_SHORT ("%actorOff%" + (16 * 0x110) + 0x26) 479
  WRITE_LONG ("%actorOff%" + (16 * 0x110) + 0x34) 7
  WRITE_ASCII ("%actorOff%" + (17 * 0x110) + 0x50) ~RZDEST~ #8
  WRITE_ASCII ("%actorOff%" + (18 * 0x110) + 0x50) ~RZDEST~ #8
  WRITE_ASCII ("%actorOff%" + (26 * 0x110) + 0x80) ~JELLOC~ #8
  WRITE_ASCII ("%actorOff%" + (27 * 0x110) + 0x80) ~JELLOC~ #8
  WRITE_ASCII ("%actorOff%" + (28 * 0x110) + 0x50) ~RZDEST~ #8
  WRITE_ASCII ("%actorOff%" + (29 * 0x110) + 0x80) ~RZSIIO02~ #8
  WRITE_ASCII ("%actorOff%" + (30 * 0x110) + 0x80) ~RZSIIO02~ #8
  WRITE_ASCII ("%actorOff%" + (31 * 0x110) + 0x50) ~RZDEST~ #8
  WRITE_SHORT ("%spawnOff%" + 0x74) 10
  WRITE_ASCII ("%spawnOff%" + 0x24) ~WYVBAB01~ #8
  WRITE_ASCII ("%spawnOff%" + 0x2C) ~ELEMEP01~ #8
  WRITE_ASCII ("%spawnOff%" + 0x34) ~ELEMEP02~ #8
  WRITE_ASCII ("%spawnOff%" + 0x3C) ~SPIDGI01~ #8
  WRITE_ASCII ("%spawnOff%" + 0x44) ~ELEMEP03~ #8
  WRITE_ASCII ("%spawnOff%" + 0x4C) ~ELEMEP04~ #8
  WRITE_ASCII ("%spawnOff%" + 0x54) ~ICMYC01~ #8
  WRITE_ASCII ("%spawnOff%" + 0x5C) ~ELEMEP05~ #8
  WRITE_ASCII ("%spawnOff%" + 0x64) ~ELEMEP07~ #8
  WRITE_ASCII ("%spawnOff%" + 0x6C) ~WEREWO01~ #8
  WRITE_SHORT ("%spawnOff%" + 0xc8 + 0x74) 10
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x24) ~WYVBAB01~ #8
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x2C) ~ELEMEP01~ #8
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x34) ~ELEMEP02~ #8
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x3C) ~SPIDGI01~ #8
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x44) ~ELEMEP03~ #8
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x4C) ~ELEMEP04~ #8
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x54) ~ICMYC01~ #8
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x5C) ~ELEMEP05~ #8
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x64) ~ELEMEP07~ #8
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x6C) ~WEREWO01~ #8
  WRITE_SHORT ("%spawnOff%" + (2 * 0xc8) + 0x20) 2573
  WRITE_SHORT ("%spawnOff%" + (2 * 0xc8) + 0x22) 2461
  WRITE_SHORT ("%spawnOff%" + (2 * 0xc8) + 0x74) 10
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x24) ~WYVBAB01~ #8
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x2C) ~ELEMEP01~ #8
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x34) ~ELEMEP02~ #8
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x3C) ~SPIDGI01~ #8
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x44) ~ELEMEP03~ #8
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x4C) ~ELEMEP04~ #8
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x54) ~ICMYC01~ #8
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x5C) ~ELEMEP05~ #8
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x64) ~ELEMEP07~ #8
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x6C) ~WEREWO01~ #8
  WRITE_SHORT ("%spawnOff%" + (4 * 0xc8) + 0x74) 10
  WRITE_ASCII ("%spawnOff%" + (4 * 0xc8) + 0x24) ~WYVBAB01~ #8
  WRITE_ASCII ("%spawnOff%" + (4 * 0xc8) + 0x2C) ~ELEMEP01~ #8
  WRITE_ASCII ("%spawnOff%" + (4 * 0xc8) + 0x34) ~ELEMEP02~ #8
  WRITE_ASCII ("%spawnOff%" + (4 * 0xc8) + 0x3C) ~SPIDGI01~ #8
  WRITE_ASCII ("%spawnOff%" + (4 * 0xc8) + 0x44) ~ELEMEP03~ #8
  WRITE_ASCII ("%spawnOff%" + (4 * 0xc8) + 0x4C) ~ELEMEP04~ #8
  WRITE_ASCII ("%spawnOff%" + (4 * 0xc8) + 0x54) ~ICMYC01~ #8
  WRITE_ASCII ("%spawnOff%" + (4 * 0xc8) + 0x5C) ~ELEMEP05~ #8
  WRITE_ASCII ("%spawnOff%" + (4 * 0xc8) + 0x64) ~ELEMEP07~ #8
  WRITE_ASCII ("%spawnOff%" + (4 * 0xc8) + 0x6C) ~WEREWO01~ #8
  WRITE_SHORT ("%spawnOff%" + (6 * 0xc8) + 0x74) 10
  WRITE_ASCII ("%spawnOff%" + (6 * 0xc8) + 0x24) ~WYVBAB01~ #8
  WRITE_ASCII ("%spawnOff%" + (6 * 0xc8) + 0x2C) ~ELEMEP01~ #8
  WRITE_ASCII ("%spawnOff%" + (6 * 0xc8) + 0x34) ~ELEMEP02~ #8
  WRITE_ASCII ("%spawnOff%" + (6 * 0xc8) + 0x3C) ~SPIDGI01~ #8
  WRITE_ASCII ("%spawnOff%" + (6 * 0xc8) + 0x44) ~ELEMEP03~ #8
  WRITE_ASCII ("%spawnOff%" + (6 * 0xc8) + 0x4C) ~ELEMEP04~ #8
  WRITE_ASCII ("%spawnOff%" + (6 * 0xc8) + 0x54) ~ICMYC01~ #8
  WRITE_ASCII ("%spawnOff%" + (6 * 0xc8) + 0x5C) ~ELEMEP05~ #8
  WRITE_ASCII ("%spawnOff%" + (6 * 0xc8) + 0x64) ~ELEMEP07~ #8
  WRITE_ASCII ("%spawnOff%" + (6 * 0xc8) + 0x6C) ~WEREWO01~ #8
  WRITE_SHORT ("%spawnOff%" + (7 * 0xc8) + 0x74) 10
  WRITE_ASCII ("%spawnOff%" + (7 * 0xc8) + 0x24) ~WYVBAB01~ #8
  WRITE_ASCII ("%spawnOff%" + (7 * 0xc8) + 0x2C) ~ELEMEP01~ #8
  WRITE_ASCII ("%spawnOff%" + (7 * 0xc8) + 0x34) ~ELEMEP02~ #8
  WRITE_ASCII ("%spawnOff%" + (7 * 0xc8) + 0x3C) ~SPIDGI01~ #8
  WRITE_ASCII ("%spawnOff%" + (7 * 0xc8) + 0x44) ~ELEMEP03~ #8
  WRITE_ASCII ("%spawnOff%" + (7 * 0xc8) + 0x4C) ~ELEMEP04~ #8
  WRITE_ASCII ("%spawnOff%" + (7 * 0xc8) + 0x54) ~ICMYC01~ #8
  WRITE_ASCII ("%spawnOff%" + (7 * 0xc8) + 0x5C) ~ELEMEP05~ #8
  WRITE_ASCII ("%spawnOff%" + (7 * 0xc8) + 0x64) ~ELEMEP07~ #8
  WRITE_ASCII ("%spawnOff%" + (7 * 0xc8) + 0x6C) ~WEREWO01~ #8
  WRITE_SHORT ("%spawnOff%" + (3 * 0xc8) + 0x74) 0
  WRITE_ASCII ("%spawnOff%" + (3 * 0xc8) + 0x24) ~NONE~ #8
  WRITE_SHORT ("%spawnOff%" + (5 * 0xc8) + 0x74) 0
  WRITE_ASCII ("%spawnOff%" + (5 * 0xc8) + 0x24) ~NONE~ #8
  WRITE_SHORT ("%spawnOff%" + (8 * 0xc8) + 0x74) 0
  WRITE_ASCII ("%spawnOff%" + (8 * 0xc8) + 0x24) ~NONE~ #8
  WRITE_SHORT ("%spawnOff%" + (9 * 0xc8) + 0x74) 0
  WRITE_ASCII ("%spawnOff%" + (9 * 0xc8) + 0x24) ~NONE~ #8
    WRITE_SHORT 0x058 ("%#ofActor%" + 19)
    WRITE_SHORT 0x5a ("%#ofTrigg%" + 1)
    WRITE_LONG 0x05c ("%triggOff%" + (19 * 0x110))
    WRITE_LONG 0x060 ("%spawnOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x068 ("%entraOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x070 ("%contaOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x078 ("%itemsOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x07c ("%vertiOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x084 ("%ambiaOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x088 ("%variaOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x0A0 ("%exploOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x0A8 ("%doorsOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x0B0 ("%animaOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x0B8 ("%tiledOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x0BC ("%songsOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x0C0 ("%restcOff%" + (19 * 0x110) + 0xc4)
    WRITE_LONG 0x0C4 ("%automOff%" + (19 * 0x110) + 0xc4)
  INSERT_BYTES ("%actorOff%" + "%#ofActor%" * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + "%#ofActor%" * 0x110) ~RZSIID07~
    WRITE_SHORT ("%actorOff%" + "%#ofActor%" * 0x110 + 0x20) 1008
    WRITE_SHORT ("%actorOff%" + "%#ofActor%" * 0x110 + 0x22) 2673
    WRITE_SHORT ("%actorOff%" + "%#ofActor%" * 0x110 + 0x24) 1008
    WRITE_SHORT ("%actorOff%" + "%#ofActor%" * 0x110 + 0x26) 2673
    WRITE_LONG ("%actorOff%" + "%#ofActor%" * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + "%#ofActor%" * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + "%#ofActor%" * 0x110 + 0x34) 14
    WRITE_LONG ("%actorOff%" + "%#ofActor%" * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + "%#ofActor%" * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + "%#ofActor%" * 0x110 + 0x80) ~RZSIID07~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 1) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 1) * 0x110) ~RZSIID08~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x20) 1061
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x22) 2608
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x24) 1061
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x26) 2608
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x34) 13
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x80) ~RZSIID08~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 2) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 2) * 0x110) ~RZSIID09~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x20) 966
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x22) 2572
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x24) 966
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x26) 2572
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x34) 10
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x80) ~RZSIID09~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 3) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 3) * 0x110) ~RZSIID10~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x20) 889
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x22) 2554
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x24) 889
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x26) 2554
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x34) 8
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x80) ~RZSIID10~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 4) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 4) * 0x110) ~RZSIIH01~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x20) 3203
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x22) 713
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x24) 3203
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x26) 713
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x34) 12
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x80) ~RZSIIH01~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 5) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 5) * 0x110) ~RZSIIH02~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x20) 3108
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x22) 622
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x24) 3108
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x26) 622
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x34) 13
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x80) ~RZSIIH02~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 6) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 6) * 0x110) ~RZSIIH03~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x20) 3042
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x22) 679
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x24) 3042
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x26) 679
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x34) 6
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x80) ~RZSIIH03~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 7) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 7) * 0x110) ~RZSIIH04~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x20) 3116
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x22) 679
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x24) 3116
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x26) 679
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x34) 10
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x80) ~RZSIIH04~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 8) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 8) * 0x110) ~RZSIIO01~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x20) 1189
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x22) 897
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x24) 1189
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x26) 897
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x34) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x80) ~RZSIIO01~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 9) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 9) * 0x110) ~RZSIIO02~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x20) 1366
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x22) 814
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x24) 1366
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x26) 814
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x34) 3
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x80) ~RZSIIO02~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 10) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 10) * 0x110) ~RZSIIO02~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x20) 1153
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x22) 758
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x24) 1153
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x26) 758
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x34) 12
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x80) ~RZSIIO02~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 11) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 11) * 0x110) ~RZSIIO03~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 11) * 0x110 + 0x20) 1257
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 11) * 0x110 + 0x22) 845
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 11) * 0x110 + 0x24) 1257
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 11) * 0x110 + 0x26) 845
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 11) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 11) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 11) * 0x110 + 0x34) 10
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 11) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 11) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 11) * 0x110 + 0x80) ~RZSIIO03~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 12) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 12) * 0x110) ~DSTHIEF~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 12) * 0x110 + 0x20) 721
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 12) * 0x110 + 0x22) 1806
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 12) * 0x110 + 0x24) 721
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 12) * 0x110 + 0x26) 1806
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 12) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 12) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 12) * 0x110 + 0x34) 8
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 12) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 12) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 12) * 0x110 + 0x80) ~DSTHIEF~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 13) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 13) * 0x110) ~DSTHIEF~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 13) * 0x110 + 0x20) 538
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 13) * 0x110 + 0x22) 1682
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 13) * 0x110 + 0x24) 538
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 13) * 0x110 + 0x26) 1682
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 13) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 13) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 13) * 0x110 + 0x34) 12
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 13) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 13) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 13) * 0x110 + 0x80) ~DSTHIEF~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 14) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 14) * 0x110) ~DSTHIEF~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 14) * 0x110 + 0x20) 717
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 14) * 0x110 + 0x22) 1616
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 14) * 0x110 + 0x24) 717
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 14) * 0x110 + 0x26) 1616
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 14) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 14) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 14) * 0x110 + 0x34) 8
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 14) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 14) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 14) * 0x110 + 0x80) ~DSTHIEF~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 15) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 15) * 0x110) ~RZSIID11~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 15) * 0x110 + 0x20) 625
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 15) * 0x110 + 0x22) 1720
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 15) * 0x110 + 0x24) 625
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 15) * 0x110 + 0x26) 1720
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 15) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 15) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 15) * 0x110 + 0x34) 13
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 15) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 15) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 15) * 0x110 + 0x80) ~RZSIID11~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 16) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 16) * 0x110) ~RZSIID11~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 16) * 0x110 + 0x20) 697
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 16) * 0x110 + 0x22) 1638
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 16) * 0x110 + 0x24) 697
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 16) * 0x110 + 0x26) 1638
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 16) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 16) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 16) * 0x110 + 0x34) 4
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 16) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 16) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 16) * 0x110 + 0x80) ~RZSIID11~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 17) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 17) * 0x110) ~RZSIID12~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 17) * 0x110 + 0x20) 746
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 17) * 0x110 + 0x22) 1315
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 17) * 0x110 + 0x24) 746
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 17) * 0x110 + 0x26) 1315
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 17) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 17) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 17) * 0x110 + 0x34) 10
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 17) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 17) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 17) * 0x110 + 0x80) ~RZSIID12~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 18) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 18) * 0x110) ~RZSIIT10~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 18) * 0x110 + 0x20) 710
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 18) * 0x110 + 0x22) 1349
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 18) * 0x110 + 0x24) 710
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 18) * 0x110 + 0x26) 1349
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 18) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 18) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 18) * 0x110 + 0x34) 10
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 18) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 18) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 18) * 0x110 + 0x80) ~RZSIIT10~
  INSERT_BYTES (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%"))) 0xc4
    WRITE_ASCII  (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%")) + 0x00) ~RZSIILightImoen~
    WRITE_SHORT  (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%")) + 0x20) 0
    WRITE_SHORT  (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%")) + 0x22) 2952
    WRITE_SHORT  (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%")) + 0x24) 3345
    WRITE_SHORT  (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%")) + 0x26) 3030
    WRITE_SHORT  (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%")) + 0x28) 3505
    WRITE_LONG  (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%")) + 0x34) 0
    WRITE_SHORT  (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%")) + 0x70) 3017
    WRITE_SHORT  (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%")) + 0x72) 3410
    WRITE_ASCII  (("%triggOff%") + (19 * 0x110) + (0xc4 * ("%#ofTrigg%")) + 0x7c) ~RZSIIT01~
BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~AR0603.are~ ~override~
  READ_SHORT 0x058 "#ofActor"
  READ_LONG 0x054 "actorOff"
  READ_SHORT 0x05a "#ofTrigg"
  READ_LONG 0x05c "triggOff"
  READ_LONG 0x064 "#ofSpawn"
  READ_LONG 0x060 "spawnOff"
  READ_LONG 0x06c "#ofEntra"
  READ_LONG 0x068 "entraOff"
  READ_SHORT 0x074 "#ofConta"
  READ_LONG 0x070 "contaOff"
  READ_SHORT 0x076 "#ofItems"
  READ_LONG 0x078 "itemsOff"
  READ_SHORT 0x080 "#ofVerti"
  READ_LONG 0x07c "vertiOff"
  READ_SHORT 0x082 "#ofAmbia"
  READ_LONG 0x084 "ambiaOff"
  READ_LONG 0x08c "#ofVaria"
  READ_LONG 0x088 "variaOff"
  READ_LONG 0x09c "#ofExplo"
  READ_LONG 0x0A0 "exploOff"
  READ_LONG 0x0A4 "#ofDoors"
  READ_LONG 0x0A8 "doorsOff"
  READ_LONG 0x0AC "#ofAnima"
  READ_LONG 0x0B0 "animaOff"
  READ_LONG 0x0B4 "#ofTiled"
  READ_LONG 0x0B8 "tiledOff"
  READ_LONG 0x0BC "songsOff"
  READ_LONG 0x0C0 "restcOff"
  READ_LONG 0x0C8 "#ofAutom"
  READ_LONG 0x0C4 "automOff"
  WRITE_ASCII ("%actorOff%" + (37 * 0x110) + 0x80) ~RZSIIT01~ #8
  WRITE_SHORT ("%actorOff%" + (37 * 0x110) + 0x20) 761
  WRITE_SHORT ("%actorOff%" + (37 * 0x110) + 0x22) 379
  WRITE_SHORT ("%actorOff%" + (37 * 0x110) + 0x24) 761
  WRITE_SHORT ("%actorOff%" + (37 * 0x110) + 0x26) 379
  WRITE_LONG ("%actorOff%" + (37 * 0x110) + 0x34) 12
  WRITE_ASCII ("%actorOff%" + (35 * 0x110) + 0x80) ~RZSIIT02~ #8
  WRITE_SHORT ("%actorOff%" + (35 * 0x110) + 0x20) 848
  WRITE_SHORT ("%actorOff%" + (35 * 0x110) + 0x22) 414
  WRITE_SHORT ("%actorOff%" + (35 * 0x110) + 0x24) 848
  WRITE_SHORT ("%actorOff%" + (35 * 0x110) + 0x26) 414
  WRITE_LONG ("%actorOff%" + (35 * 0x110) + 0x34) 10
  WRITE_ASCII ("%actorOff%" + (36 * 0x110) + 0x80) ~RZSIIT03~ #8
  WRITE_SHORT ("%actorOff%" + (36 * 0x110) + 0x20) 774
  WRITE_SHORT ("%actorOff%" + (36 * 0x110) + 0x22) 203
  WRITE_SHORT ("%actorOff%" + (36 * 0x110) + 0x24) 774
  WRITE_SHORT ("%actorOff%" + (36 * 0x110) + 0x26) 203
  WRITE_LONG ("%actorOff%" + (36 * 0x110) + 0x34) 14
  WRITE_ASCII ("%actorOff%" + (5 * 0x110) + 0x80) ~RZSIIT05~ #8
  WRITE_SHORT ("%actorOff%" + (5 * 0x110) + 0x20) 1751
  WRITE_SHORT ("%actorOff%" + (5 * 0x110) + 0x22) 2132
  WRITE_SHORT ("%actorOff%" + (5 * 0x110) + 0x24) 1751
  WRITE_SHORT ("%actorOff%" + (5 * 0x110) + 0x26) 2132
  WRITE_LONG ("%actorOff%" + (5 * 0x110) + 0x34) 10
  WRITE_ASCII ("%actorOff%" + (6 * 0x110) + 0x80) ~RZSIIT04~ #8
  WRITE_SHORT ("%actorOff%" + (6 * 0x110) + 0x20) 2100
  WRITE_SHORT ("%actorOff%" + (6 * 0x110) + 0x22) 2065
  WRITE_SHORT ("%actorOff%" + (6 * 0x110) + 0x24) 2100
  WRITE_SHORT ("%actorOff%" + (6 * 0x110) + 0x26) 2065
  WRITE_LONG ("%actorOff%" + (6 * 0x110) + 0x34) 2
  WRITE_ASCII ("%actorOff%" + (7 * 0x110) + 0x80) ~RZSIIT06~ #8
  WRITE_SHORT ("%actorOff%" + (7 * 0x110) + 0x20) 2030
  WRITE_SHORT ("%actorOff%" + (7 * 0x110) + 0x22) 2095
  WRITE_SHORT ("%actorOff%" + (7 * 0x110) + 0x24) 2030
  WRITE_SHORT ("%actorOff%" + (7 * 0x110) + 0x26) 2095
  WRITE_LONG ("%actorOff%" + (7 * 0x110) + 0x34) 5
  WRITE_ASCII ("%actorOff%" + (32 * 0x110) + 0x80) ~RZSIIT07~ #8
  WRITE_SHORT ("%actorOff%" + (32 * 0x110) + 0x20) 364
  WRITE_SHORT ("%actorOff%" + (32 * 0x110) + 0x22) 1542
  WRITE_SHORT ("%actorOff%" + (32 * 0x110) + 0x24) 364
  WRITE_SHORT ("%actorOff%" + (32 * 0x110) + 0x26) 1542
  WRITE_LONG ("%actorOff%" + (32 * 0x110) + 0x34) 5
  WRITE_SHORT ("%spawnOff%" + 0x74) 0
  WRITE_ASCII ("%spawnOff%" + 0x24) ~NONE~ #8
  WRITE_SHORT ("%spawnOff%" + 0xc8 + 0x74) 0
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x24) ~NONE~ #8
  WRITE_ASCII ("%spawnOff%" + 0xc8 + 0x2C) ~NONE~ #8
  WRITE_SHORT ("%spawnOff%" + (2 * 0xc8) + 0x74) 0
  WRITE_ASCII ("%spawnOff%" + (2 * 0xc8) + 0x24) ~NONE~ #8
  WRITE_ASCII ("%actorOff%" + 0x80) ~RZSIIFRN~ #8
  WRITE_ASCII ("%actorOff%" + (2 * 0x110) + 0x80) ~RZSIICLO~ #8
  WRITE_ASCII ("%actorOff%" + (3 * 0x110) + 0x50) ~RZDEST~ #8
  WRITE_ASCII ("%actorOff%" + (4 * 0x110) + 0x50) ~RZDEST~ #8
  WRITE_ASCII ("%actorOff%" + (8 * 0x110) + 0x50) ~RZDEST~ #8
  WRITE_ASCII ("%actorOff%" + (29 * 0x110) + 0x50) ~RZDEST~ #8
    WRITE_SHORT 0x058 ("%#ofActor%" + 11)
    WRITE_LONG 0x05c ("%triggOff%" + (11 * 0x110))
    WRITE_LONG 0x060 ("%spawnOff%" + (11 * 0x110))
    WRITE_LONG 0x068 ("%entraOff%" + (11 * 0x110))
    WRITE_LONG 0x070 ("%contaOff%" + (11 * 0x110))
    WRITE_LONG 0x078 ("%itemsOff%" + (11 * 0x110))
    WRITE_LONG 0x07c ("%vertiOff%" + (11 * 0x110))
    WRITE_LONG 0x084 ("%ambiaOff%" + (11 * 0x110))
    WRITE_LONG 0x088 ("%variaOff%" + (11 * 0x110))
    WRITE_LONG 0x0A0 ("%exploOff%" + (11 * 0x110))
    WRITE_LONG 0x0A8 ("%doorsOff%" + (11 * 0x110))
    WRITE_LONG 0x0B0 ("%animaOff%" + (11 * 0x110))
    WRITE_LONG 0x0B8 ("%tiledOff%" + (11 * 0x110))
    WRITE_LONG 0x0BC ("%songsOff%" + (11 * 0x110))
    WRITE_LONG 0x0C0 ("%restcOff%" + (11 * 0x110))
    WRITE_LONG 0x0C4 ("%automOff%" + (11 * 0x110))
  INSERT_BYTES ("%actorOff%" + "%#ofActor%" * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + "%#ofActor%" * 0x110) ~RZSIID08~
    WRITE_SHORT ("%actorOff%" + "%#ofActor%" * 0x110 + 0x20) 429
    WRITE_SHORT ("%actorOff%" + "%#ofActor%" * 0x110 + 0x22) 1741
    WRITE_SHORT ("%actorOff%" + "%#ofActor%" * 0x110 + 0x24) 429
    WRITE_SHORT ("%actorOff%" + "%#ofActor%" * 0x110 + 0x26) 1741
    WRITE_LONG ("%actorOff%" + "%#ofActor%" * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + "%#ofActor%" * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + "%#ofActor%" * 0x110 + 0x34) 8
    WRITE_LONG ("%actorOff%" + "%#ofActor%" * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + "%#ofActor%" * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + "%#ofActor%" * 0x110 + 0x80) ~RZSIID08~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 1) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 1) * 0x110) ~RZSIIT08~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x20) 390
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x22) 1648
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x24) 390
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x26) 1648
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x34) 14
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 1) * 0x110 + 0x80) ~RZSIIT08~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 2) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 2) * 0x110) ~RZSIID11~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x20) 511
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x22) 1800
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x24) 511
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x26) 1800
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x34) 4
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 2) * 0x110 + 0x80) ~RZSIID11~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 3) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 3) * 0x110) ~RZSIID11~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x20) 448
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x22) 1667
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x24) 448
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x26) 1667
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x34) 6
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 3) * 0x110 + 0x80) ~RZSIID11~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 4) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 4) * 0x110) ~DSTHIEF~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x20) 365
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x22) 1709
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x24) 365
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x26) 1709
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x34) 12
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 4) * 0x110 + 0x80) ~DSTHIEF~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 5) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 5) * 0x110) ~RZSIIG01~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x20) 3481
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x22) 733
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x24) 3481
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x26) 733
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x34) 2
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 5) * 0x110 + 0x80) ~RZSIIG01~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 6) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 6) * 0x110) ~RZSIIT09~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x20) 3416
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x22) 762
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x24) 3416
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x26) 762
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x34) 10
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 6) * 0x110 + 0x80) ~RZSIIT09~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 7) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 7) * 0x110) ~RZSIIT11~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x20) 3456
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x22) 835
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x24) 3456
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x26) 835
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x34) 9
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 7) * 0x110 + 0x80) ~RZSIIT11~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 8) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 8) * 0x110) ~RZSIIT08~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x20) 2885
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x22) 1021
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x24) 2885
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x26) 1021
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x34) 7
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 8) * 0x110 + 0x80) ~RZSIIT08~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 9) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 9) * 0x110) ~RZSIIT07~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x20) 2916
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x22) 1166
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x24) 2916
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x26) 1166
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x34) 4
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 9) * 0x110 + 0x80) ~RZSIIT07~
  INSERT_BYTES ("%actorOff%" + ("%#ofActor%" + 10) * 0x110) 0x110
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 10) * 0x110) ~RZSIIT07~
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x20) 2956
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x22) 1070
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x24) 2956
    WRITE_SHORT ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x26) 1070
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x28) 1
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x38) 0xffffffff
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x34) 6
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x40) 65535
    WRITE_LONG ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x42) 65535
    WRITE_ASCII ("%actorOff%" + ("%#ofActor%" + 10) * 0x110 + 0x80) ~RZSIIT07~
BUT_ONLY_IF_IT_CHANGES
END

LANGUAGE ~Cesky~
         ~czech~
         ~SlightlyImprovedIlyich/czech/setup.tra~
LANGUAGE ~English~
         ~english~
         ~SlightlyImprovedIlyich/english/setup.tra~
LANGUAGE ~Francais pour oBG2 (thanks to Lothringen (of the d'Oghmatiques))~
         ~french~
         ~SlightlyImprovedIlyich/french/setup.tra~
LANGUAGE ~Francais pour BG2EE (thanks to Lothringen (of the d'Oghmatiques))~
         ~frenchEE~
         ~SlightlyImprovedIlyich/frenchEE/setup.tra~
         
BEGIN @0
SUBCOMPONENT @0
REQUIRE_FILE ~Data/25Dialog.bif~ @4
  LAUNCH_ACTION_MACRO ~DETECTABLE_SPELLS~
  LAUNCH_ACTION_MACRO ~COMPONENT_A~

BEGIN @3
SUBCOMPONENT @0
REQUIRE_FILE ~Data/25Dialog.bif~ @4
LAUNCH_ACTION_MACRO ~DETECTABLE_SPELLS~
LAUNCH_ACTION_MACRO ~COMPONENT_A~
COMPILE ~SlightlyImprovedIlyich/are-baf/RZSIIYOS.baf~
COMPILE ~SlightlyImprovedIlyich/are-baf/RZSIISPY.baf~
COPY_EXISTING ~SPY406.cre~ ~override/RZsiiSpy.cre~
     WRITE_ASCII 0x248 ~RZSIISPY~ #8
     WRITE_ASCII 0x280 ~RZsiiSpy~
EXTEND_BOTTOM ~AR0602.bcs~ ~SlightlyImprovedIlyich/are-baf/RZar0602.baf~
COPY_EXISTING ~YOSHI7.cre~ ~override~
              ~YOSHI8.cre~ ~override~
              ~YOSHI10.cre~ ~override~
              ~YOSHI11.cre~ ~override~
              ~YOSHI12.cre~ ~override~
  WRITE_ASCII 0x250 ~RZSIIYOS~ #8
BUT_ONLY_IF_IT_CHANGES